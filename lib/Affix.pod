=encoding utf-8

=head1 NAME

Affix - A Foreign Function Interface eXtension

=head1 SYNOPSIS

    use Affix;

    # bind to exported function
    affix 'm', 'floor', [Double], Double;
    warn floor(3.14159); # 3

    # wrap an exported function in a code reference
    my $getpid = wrap 'c', 'getpid', [], Int;
    warn $getpid->(); # $$

    # bind an exported value to a Perl value
    pin( my $ver, 'libfoo', 'VERSION', Int );

=head1 DESCRIPTION

Affix is an L<FFI|https://en.wikipedia.org/wiki/Foreign_function_interface> to
wrap libraries developed in other languages (C, C++, Rust, etc.) without having
to write or maintain XS.

=head2 Features

Affix supports the following features right out of the box:

=over

=item Works on Windows, macOS, Linux, BSD, and more

=item Callbacks

=item Pointers

=item Typedefs

=item Global/Exported variables

=item Libraries developed in C, C++, and Rust (and more to come!) even those with mangled symbol names

=item Aggregates such as structs, unions, and arrays

=item Passing aggregates by value

=item Nested aggregates

=item 'Smart' enums

=item Tested to work all the way down to Perl 5.026 (which is ancient in my book)

=back

=head1 Basics

Affix's basic API is rather simple but not lacking in power. Let's start at the
beginning with the eponymous C<affix( ... )> function.

=head2 C<affix( ... )>

Attach a given symbol to a named perl sub.

    affix 'C:\Windows\System32\user32.dll', 'pow', [Double, Double] => Double;
    warn pow( 3, 5 );

    affix 'c', 'puts', [Str], Int;
    puts( 'Hello' );

    affix 'c', ['puts', 'write'], [Str], Int; # renamed function
    write( 'Hello' );

    affix undef, [ 'rint', 'round' ], [Double], Double; # use current process
    warn round(3.14);

    affix [ 'xxhash', '0.8.2' ], [ 'XXH_versionNumber', 'xxHash::version' ], [], UInt;
    warn xxHash::version();

Expected parameters include:

=over

=item C<lib>

File path or name of the library to load symbols from. Pass an explicit
C<undef> to pull functions from the main executable.

Optionally, you may provide an array reference with the library and a version
number if the library was built with such a value as part of its filename.

=item C<symbol_name>

Name of the symbol to wrap.

Optionally, you may provide an array reference with the symbol's name and the
name of the wrapping subroutine.

=item C<parameters>

Provide the argument types in an array reference.

=item C<return>

A single return type for the function.

=back

On success, C<affix( ... )> returns the generated code reference which may be
called directly but you'll likely use the name you provided.

=head2 C<wrap( ... )>

Creates a wrapper around a given symbol in a given library.

    my $pow = wrap( 'C:\Windows\System32\user32.dll', 'pow', [Double, Double] => Double );
    warn $pow->(5, 10); # 5**10

Parameters include:

=over

=item C<lib>

File path or name of the library to load symbols from. Pass an explicit
C<undef> to pull functions from the main executable.

Optionally, you may provide an array reference with the library and a version
number if the library was built with such a value as part of its filename.

=item C<symbol_name>

Name of the symbol to wrap.

=item C<parameters>

Provide the argument types in an array reference.

=item C<return>

A single return type for the function.

=back

C<wrap( ... )> behaves exactly like C<affix( ... )> but returns an anonymous
subroutine and does not pollute the namespace.

=head2 C<pin( ... )>

    my $errno;
    pin $errno, 'libc', 'errno', Int;
    print $errno;
    $errno = 0;

Variables exported by a library - also referred to as "global" or "extern"
variables - can be accessed using C<pin( ... )>. The above example code applies
magic to C<$error> that binds it to the integer variable named "errno" as
exported by the L<libc> library.

Expected parameters include:

=over

=item C<var>

Perl scalar that will be bound to the exported variable.

=item C<lib>

File path or name of the library to load symbols from. Pass an explicit
C<undef> to pull functions from the main executable.

Optionally, you may provide an array reference with the library and a version
number if the library was built with such a value as part of its filename.

=item C<symbol_name>

Name of the exported variable to wrap.

=item C<$type>

Indicate to Affix what type of data the variable contains.

=back

This is likely broken on BSD but patches are welcome.

=head1 Sugary Sweet

This part of the API is inspired by L<Raku's C<native>
trait|https://docs.raku.org/language/nativecall>.

A simple example would look like this under Affix:

    use Affix;
    sub some_argless_function :Native('something');
    some_argless_function();

=head2 C<:Native> CODE attribute

We use the C<:Native> attribute in order to specify that the sub is actually
defined in a native library.

The first time you call "some_argless_function", the "libsomething" will be
loaded and the "some_argless_function" will be located in it. A call will then
be made. Subsequent calls will be faster, since the symbol handle is retained.

Of course, most functions take arguments or return values--but everything else
that you can do is just adding to this simple pattern of declaring a Perl sub,
naming it after the symbol you want to call and marking it with the
C<:Native>-related attributes.

To include a version number, your code should look like this:

    sub some_argless_function :Native('foo', v1.2.3)

=head2 C<:Symbol>

Affix provides the C<:Symbol> attribute for you to specify the name of the
native routine in your library that may be different from your Perl subroutine
name.

    package Foo;
    use Affix;
    sub init :Native('foo') :Symbol('FOO_INIT');

Inside of C<libfoo> there is a routine called C<FOO_INIT> but, since we're
creating a module called C<Foo> and we'd rather call the routine as
C<Foo::init> (instead of C<Foo::FOO_INIT>), we use the symbol trait to specify
the name of the symbol in C<libfoo> and call the subroutine whatever we want
(C<init> in this case).

=head2 C<:Signature>

    use Affix;
    sub add :Native("calculator") :Signature([Int, Int] => Int);

Here, we have declared that the function takes two 32-bit integers and returns
a 32-bit integer.

=head1 Memory Functions

To help toss raw data around, some standard memory related functions are
exposed here. You may import them by name or with the C<:memory> or C<:all>
tags.

=head2 C<malloc( ... )>

    my $ptr = malloc( $size );

Allocates C<$size> bytes of uninitialized storage.

=head2 C<calloc( ... )>

    my $ptr = calloc( $num, $size );

Allocates memory for an array of C<$num> objects of C<$size> and initializes
all bytes in the allocated storage to zero.

=head2 C<realloc( ... )>

    $ptr = realloc( $ptr, $new_size );

Reallocates the given area of memory. It must be previously allocated by
C<malloc( ... )>, C<calloc( ... )>, or C<realloc( ... )> and not yet freed with
a call to C<free( ... )> or C<realloc( ... )>. Otherwise, the results are
undefined.

=head2 C<free( ... )>

    free( $ptr );

Deallocates the space previously allocated by C<malloc( ... )>, C<calloc( ...
)>, or C<realloc( ... )>.

=head2 C<memchr( ... )>

    memchr( $ptr, $ch, $count );

Finds the first occurrence of C<$ch> in the initial C<$count> bytes (each
interpreted as unsigned char) of the object pointed to by C<$ptr>.

=head2 C<memcmp( ... )>

    my $cmp = memcmp( $lhs, $rhs, $count );

Compares the first C<$count> bytes of the objects pointed to by C<$lhs> and
C<$rhs>. The comparison is done lexicographically.

=head2 C<memset( ... )>

    memset( $dest, $ch, $count );

Copies the value C<$ch> into each of the first C<$count> characters of the
object pointed to by C<$dest>.

=head2 C<memcpy( ... )>

    memcpy( $dest, $src, $count );

Copies C<$count> characters from the object pointed to by C<$src> to the object
pointed to by C<$dest>.

=head2 C<memmove( ... )>

    memmove( $dest, $src, $count );

Copies C<$count> characters from the object pointed to by C<$src> to the object
pointed to by C<$dest>.

=head2 C<sizeof( ... )>

    my $size = sizeof( Int );
    my $size1 = sizeof( Struct[ name => Str, age => Int ] );

Returns the size, in bytes, of the L<type|/Types> passed to it.

=head2 C<offsetof( ... )>

    my $struct = Struct[ name => Str, age => Int ];
    my $offset = offsetof( $struct, 'age' );

Returns the offset, in bytes, from the beginning of a structure including
padding, if any.

=head1 Utility Functions

Here's some thin cushions for the rougher edges of wrapping libraries.

They may be imported by name for now but might be renamed, removed, or changed
in the future.

=head2 C<DumpHex( ... )>

    DumpHex( $ptr, $length );

Dumps C<$length> bytes of raw data from a given point in memory.

This is a debugging function that probably shouldn't find its way into your
code and might not be public in the future.

=head1 Signatures

You must provide Affix with a signature which may include types and calling
conventions. Let's start with an example in C:

    bool report( const char * name, int grades[5] );

The signature telling Affix how to call this function would look like this:

    affix 'libschool', 'report', [ Str, Array[Int, 5] ] => Bool;

Incoming arguments are defined in a list: C<[ Str, Array[Int, 5] ]>

The return value follows: C<Bool>

To call the function, your Perl would look like this:

    my $promote = report( 'Alex Smithe', [ 90, 82, 70, 76, 98 ] );

See the subsections entitled L<Types|/Types> for more on the possible types and
L<Calling Conventions/Calling Conventions> for advanced flags that may also be
defined as part of your signature.

=head2 Types

Affix supports the fundamental types (void, int, etc.) as well as aggregates
(struct, array, union). Please note that types given are advisory only! No type
checking is done at compile or runtime.

=head2 Fundamental Types

=for comment We really need to pull some of Pod6 into Perl 5... This is ridiculous...

=begin text

    Type        Description
    ----------------------------------------------------------------------------
    Void        Generally only used as a return value.
    Bool
    Char
    UChar
    Int8        TODO
    UInt8       TODO
    Short
    UShort
    Int16       TODO
    UInt16      TODO
    Int
    UInt
    Int32       TODO: aka Long
    UInt32      TODO: aka ULong
    Long
    ULong
    Int64       TODO: aka LongLong
    UInt64      TODO: aka ULongLong
    LongLong
    ULongLong
    Float       32bit floating point number
    Double      64bit floating point number
    Pointer     Parameterized type such as Pointer[Void] or Pointer[Int]
    Str         Essentially const char *
    Enum        Parameterized type such as Enum[ 'up', 'down', 'left', 'right' ]
    Struct      Parameterized type

=end text

=begin html

<table>     <thead>       <tr>         <th>Affix</th> <th>C99</th>
<th>Rust</th> <th>C#</th> <th>pack()</th> <th>Raku</th>       </tr> </thead>
<tbody>       <tr>         <td>Void</td> <td>void</td> <td>-&gt;()</td>
<td>void/NULL</td> <td>-</td> <td></td>       </tr>       <tr> <td>Bool</td>
<td>_Bool</td> <td>bool</td> <td>bool</td> <td>-</td> <td>bool</td>       </tr>
      <tr>         <td>Char</td> <td>int8_t</td>    <td>i8</td> <td>sbyte</td>
 <td>c</td>       <td>int8</td>    </tr>       <tr>   <td>UChar</td>
<td>uint8_t</td>         <td>u8</td>         <td>byte</td>     <td>C</td>
<td>byte, uint8</td>       </tr>       <tr> <td>Short</td>  <td>int16_t</td>
<td>i16</td>  <td>short</td> <td>s</td>         <td>int16</td>       </tr> <tr>
<td>UShort</td>  <td>uint16_t</td>         <td>u16</td> <td>ushort</td>
<td>S</td>   <td>uint16</td>       </tr> <tr> <td>Int</td> <td>int32_t</td>
<td>i32</td> <td>int</td> <td>i</td> <td>int32</td>    </tr>       <tr>
<td>UInt</td> <td>uint32_t</td>     <td>u32</td> <td>uint</td> <td>I</td>
<td>uint32</td>       </tr>     <tr> <td>Long</td> <td>int64_t</td>
<td>i64</td> <td>long</td> <td>l</td> <td>int64, long</td> </tr> <tr>
<td>ULong</td> <td>uint64_t</td>     <td>u64</td> <td>ulong</td> <td>L</td>
<td>uint64, ulong</td> </tr>       <tr> <td>LongLong</td>     <td>-/long
long</td> <td>i128</td>   <td>q</td> <td>longlong</td>         <td></td> </tr>
  <tr> <td>ULongLong</td> <td>-/unsigned long long</td> <td>u128</td>
<td>Q</td> <td>ulonglong</td>       <td></td>       </tr> <tr> <td>Float</td>
<td>float</td>         <td>f32</td> <td>f</td> <td>num32</td> <td></td> </tr>
<tr>  <td>Double</td> <td>double</td> <td>f64</td> <td>d</td> <td>num64</td>
   <td></td> </tr>    <tr> <td>SSize_t</td> <td>SSize_t</td> <td>SSize_t</td>
<td></td> <td></td>       <td></td>     </tr> <tr> <td>Size_t</td>
<td>size_t</td>         <td>size_t</td>      <td></td> <td></td> <td></td>
 </tr>       <tr> <td>Str</td> <td>char *</td> <td></td> <td></td>
<td></td> <td></td> </tr>       <tr> <td>WStr</td> <td>wchar_t</td> <td></td>
<td></td>         <td></td>      </tr> </tbody> </table>

=end html

Given sizes are minimums measured in bits

Other types are also defined according to the system's platform. See
L<Affix::Types>.

=head2 Calling Conventions

Handle with care! Using these without understanding them can break your code!

Refer to L<the dyncall manual|https://dyncall.org/docs/manual/manualse11.html>,
L<http://www.angelcode.com/dev/callconv/callconv.html>,
L<https://en.wikipedia.org/wiki/Calling_convention>, and your local
university's Comp Sci department for a deeper explanation.

After than, feel free to use or misuse any of the current options:

=over

=item C<CC_DEFAULT>

=item C<CC_THISCALL>

=item C<CC_ELLIPSIS>

=item C<CC_ELLIPSIS_VARARGS>

=item C<CC_CDECL>

=item C<CC_STDCALL>

=item C<CC_FASTCALL_MS>

=item C<CC_FASTCALL_GNU>

=item C<CC_THISCALL_MS>

=item C<CC_THISCALL_GNU>

=item C<CC_ARM_ARM>

=item C<CC_ARM_THUMB>

=item C<CC_SYSCALL>

=back

When used in L<signatures/Signatures>, most of these cause the internal
argument stack to be reset. The exceptions are C<CC_ELLIPSIS> and
C<CC_ELLIPSIS_VARARGS>.

=head1 Calling into the Standard Library

If you want to call a function that's already loaded, either from the standard
library or from your own program, you can omit the library value or pass and
explicit C<undef>.

For example, on Unix, you could use the following code to gather the home
directory and other info about the current user:

    use Affix qw[:all];
    use Data::Printer;
    typedef PwStruct => Struct [
        name  => Str,     # username
        pass  => Str,     # hashed pass if shadow db isn't in use
        uuid  => UInt,    # user
        guid  => UInt,    # group
        gecos => Str,     # real name
        dir   => Str,     # ~/
        shell => Str      # bash, etc.
    ];
    sub getuid : Native : Signature([]=>Int);
    sub getpwuid : Native : Signature([Int]=>Pointer[PwStruct()]);
    p( ( Pointer [ PwStruct() ] )->unmarshal( main::getpwuid( getuid() ) ) );

=head1 ABI/API versions

If you ask Affix to load symbols from 'foo', we'll will look for C<libfoo.so>
under Unix, (C<libfoo.dynlib> on macOS, and C<foo.dll> on Windows.

Most modern system require you or the user of your module to install the
development package because it's recommended to always provide an API/ABI
version to a shared library, so C<libfoo.so> ends often being a symbolic link
provided only by a development package.

To avoid that, the Affix allows you to specify the API/ABI version. It can be a
full version or just a part of it. (Try to stick to Major version, some BSD
code does not care for Minor.)

    use Affix;
    affix ['foo', v1], ...;       # Will try to load libfoo.so.1 on Unix
    affix ['foo', v1.2.3], ...;   # Will try to load libfoo.so.1.2.3 on Unix
    sub pow : Native('m', v6) : Signature([Double, Double] => Double);

=head1 Stack Size

You may control the max size of the internal stack that will be allocated and
used to bind the arguments to by setting the C<$VMSize> variable before using
Affix.

    BEGIN{ $Affix::VMSize = 2 ** 16; }

This value is C<4096> by default and probably should not be changed.

=head1 Examples

Very short examples might find their way into the L<Affix::Cookbook>. The best
example of use might be L<LibUI>. Brief examples will be found in C<eg/>.

=head1 See Also

All the heavy lifting is done by L<dyncall|https://dyncall.org/>.

Check out L<FFI::Platypus> for a more robust and mature FFI

L<LibUI> for a larger demo project based on Affix

L<Types::Standard> for the inspiration of the advisory types system

=head1 LICENSE

Copyright (C) Sanko Robinson.

This library is free software; you can redistribute it and/or modify it under
the terms found in the Artistic License 2. Other copyrights, terms, and
conditions may apply to data transmitted through this module.

=head1 AUTHOR

Sanko Robinson E<lt>sanko@cpan.orgE<gt>

=begin stopwords

dyncall OpenBSD FreeBSD macOS DragonFlyBSD NetBSD iOS ReactOS mips mips64 ppc32
ppc64 sparc sparc64 co-existing varargs variadic struct enum structs enums
eXtension rvalue dualvars libsomething versioned errno syscall

=end stopwords

=cut
